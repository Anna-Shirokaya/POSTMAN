{
	"info": {
		"_postman_id": "736b3c77-be5e-41cd-a6b6-688c0308d5ed",
		"name": "Home_Work_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "28319097"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Проверить, что в body приходит правильный string.(\"This is the first responce from server!ss\")\r",
							"pm.test(\"Responce matches string\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!ss\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "http://162.55.220.72:5005/first"
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json\r",
							"bodyJSON = pm.response.json();\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Name response = name request\", function (){\r",
							"   pm.expect(bodyJSON.name).to.eql(\"Anna\");\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Age response = age request\", function () {\r",
							"    console.log(typeof bodyJSON.age);\r",
							"    pm.expect(bodyJSON.age).to.eql(\"35\");\r",
							"})\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Salary response = salary request\", function (){\r",
							"    console.log(typeof bodyJSON.salary);\r",
							"    pm.expect(bodyJSON.salary).to.eql(1000);\r",
							"})\r",
							"\r",
							"//Спарсить request\r",
							"requestJSON = request.data;\r",
							"console.log(requestJSON);\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name response = name request\", function (){\r",
							"   pm.expect(bodyJSON.name).to.eql(requestJSON.name);\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Name response = name request\", function (){\r",
							"   pm.expect(bodyJSON.age).to.eql(requestJSON.age);\r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Name response = name request\", function (){\r",
							"   pm.expect(bodyJSON.salary).to.eql(Number(requestJSON.salary));\r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр family из response\r",
							"console.log(bodyJSON.family);\r",
							"\r",
							"//Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"u_salary_1_5_year = salary*4\", function (){\r",
							"    console.log(bodyJSON.family.u_salary_1_5_year);\r",
							"   pm.expect(bodyJSON.family.u_salary_1_5_year).to.eql(requestJSON.salary*4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Anna",
							"type": "text"
						},
						{
							"key": "age",
							"value": "35",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": "http://162.55.220.72:5005/user_info_3"
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Спарсить response body в json.\r",
							"respJSON = pm.response.json();\r",
							"//4. Спарсить request.\r",
							"reqJSON = pm.request.url.query.toObject();\r",
							"console.log(reqJSON);\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name response = name request\", function (){\r",
							"    pm.expect(respJSON.name).to.eql(reqJSON.name);\r",
							"})\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Age response = age request\", function (){\r",
							"    pm.expect(respJSON.age).to.eql(reqJSON.age);\r",
							"})\r",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"salary response = salary request\", function (){\r",
							"    pm.expect(respJSON.salary).to.eql(Number(reqJSON.salary));\r",
							"})\r",
							"//8. Вывести в консоль параметр family из response.\r",
							"console.log(respJSON.family);\r",
							"//9. Проверить, что у параметра dog есть параметры name.\r",
							"console.log(respJSON.family.pets.dog);\r",
							"pm.test(\"dog contain name\", function (){\r",
							"   // pm.expect(respJSON.family.pets.dog).haveOwnProperty(\"name\");\r",
							"     pm.expect(JSON.stringify(respJSON)).to.include(\"name\");\r",
							"})\r",
							"//10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"dog contain age\", function (){\r",
							"    pm.expect(respJSON.family.pets.dog).haveOwnProperty(\"age\");\r",
							"})\r",
							"\r",
							"//11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"dog Luky\", function (){\r",
							"    pm.expect(respJSON.family.pets.dog.name).contain(\"Luky\");\r",
							"})\r",
							"//12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"dog is 4\", function (){\r",
							"    pm.expect(respJSON.family.pets.dog.age).to.eql(4);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Anna&age=35&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Anna"
						},
						{
							"key": "age",
							"value": "35"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Спарсить response body в json.\r",
							"respJSON = pm.response.json();\r",
							"\r",
							"//4. Спарсить request.\r",
							"reqJSON = pm.request.url.query.toObject();\r",
							"\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name request = name response\", function (){\r",
							"    pm.expect(respJSON.name).to.equal(reqJSON.name)\r",
							"})\r",
							"//6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Name request = name response\", function (){\r",
							"    pm.expect(respJSON.age).to.equal(Number(reqJSON.age))\r",
							"})\r",
							"//7. Вывести в консоль параметр salary из request.\r",
							"console.log(reqJSON.salary);\r",
							"//8. Вывести в консоль параметр salary из response.\r",
							"console.log(respJSON.salary);\r",
							"//9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(respJSON.salary[0]);\r",
							"//10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(respJSON.salary[1]);\r",
							"//11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(respJSON.salary[2]);\r",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"request salary = response salary[0]\", function (){\r",
							"    pm.expect(respJSON.salary[0]).to.equal(Number(reqJSON.salary));\r",
							"})\r",
							"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"request salary = response salary[0]\", function (){\r",
							"    pm.expect(Number(respJSON.salary[1])).to.equal(Number(reqJSON.salary)*2);\r",
							"})\r",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"request salary = response salary[0]\", function (){\r",
							"    pm.expect(Number(respJSON.salary[2])).to.equal(Number(reqJSON.salary)*3);\r",
							"})\r",
							"//15. Создать в окружении переменную name\r",
							"pm.environment.set(\"Name\");\r",
							"//16. Создать в окружении переменную age\r",
							"pm.environment.set(\"Age\");\r",
							"//17. Создать в окружении переменную salary\r",
							"pm.environment.set(\"Salary\");\r",
							"//18. Передать в окружение переменную name\r",
							"pm.environment.set(\"Name\", respJSON.name);\r",
							"\r",
							"//19. Передать в окружение переменную age\r",
							"pm.environment.set(\"Age\", respJSON.age);\r",
							"//20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"Salary\", reqJSON.salary);\r",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for (i=0; i< (respJSON.salary.length); i++ ){\r",
							"    console.log(respJSON.salary[i])\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Anna&age=35&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Anna"
						},
						{
							"key": "age",
							"value": "35"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Вставить параметр salary из окружения в request\r",
							"//2. Вставить параметр age из окружения в age\r",
							"//3. Вставить параметр name из окружения в name\r",
							"//4. Отправить запрос.\r",
							"//5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//6. Спарсить response body в json.\r",
							"respJSON = pm.response.json();\r",
							"\r",
							"//7. Спарсить request.\r",
							"reqJSON = request.data;\r",
							"\r",
							"//8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Response have parametr start\", function (){\r",
							"    pm.expect(JSON.stringify(respJSON)).to.include(\"start_qa_salary\");\r",
							"})\r",
							"//9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Response have parametr 6_months\", function (){\r",
							"    pm.expect(JSON.stringify(respJSON)).to.include(\"qa_salary_after_6_months\");\r",
							"})\r",
							"//10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Response have parametr 12_months\", function (){\r",
							"    pm.expect(JSON.stringify(respJSON)).to.include(\"qa_salary_after_12_months\");\r",
							"})\r",
							"//11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Response have parametr 1.5_year\", function (){\r",
							"    pm.expect(JSON.stringify(respJSON)).to.include(\"qa_salary_after_1.5_year\");\r",
							"})\r",
							"//12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Response have parametr 3.5_year\", function (){\r",
							"    pm.expect(JSON.stringify(respJSON)).to.include(\"qa_salary_after_3.5_year\");\r",
							"})\r",
							"//13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"Response have parametr person\", function (){\r",
							"    pm.expect(JSON.stringify(respJSON)).to.include(\"person\");\r",
							"})\r",
							"//14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Response start_qa_salary = request salary\", function (){\r",
							"    pm.expect(respJSON.start_qa_salary).to.eql(Number(reqJSON.salary));\r",
							"})\r",
							"//15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Response qa_salary_after_6_months = request salary*2\", function (){\r",
							"    pm.expect(respJSON.qa_salary_after_6_months).to.eql(Number(reqJSON.salary)*2);\r",
							"})\r",
							"//16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"Response qa_salary_after_12_months = request salary*2.7\", function (){\r",
							"    pm.expect(respJSON.qa_salary_after_12_months).to.eql(Number(reqJSON.salary)*2.7);\r",
							"})\r",
							"//17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"Response qa_salary_after_12_months = request salary*3.3\", function (){\r",
							"    pm.expect(respJSON[\"qa_salary_after_1.5_year\"]).to.eql(Number(reqJSON.salary)*3.3);\r",
							"})\r",
							"//19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Response person u_name[1] = request salary\", function (){\r",
							"    pm.expect(respJSON.person.u_name[1]).to.eql(Number(reqJSON.salary));\r",
							"})\r",
							"//20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"Response person u_age = request age\", function (){\r",
							"    pm.expect(respJSON.person.u_age).to.eql(Number(reqJSON.age));\r",
							"})\r",
							"//21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"Response person u_salary_5_years = request salary*4.2\", function (){\r",
							"    pm.expect(respJSON.person.u_salary_5_years).to.eql(Number(reqJSON.salary)*4.2);\r",
							"})\r",
							"//22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"//console.log(key(respJSON.person));\r",
							"for (property in respJSON.person){\r",
							"    console.log(property);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{Name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{Age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{Salary}}",
							"type": "text"
						}
					]
				},
				"url": "http://162.55.220.72:5005/user_info_2"
			},
			"response": []
		}
	]
}